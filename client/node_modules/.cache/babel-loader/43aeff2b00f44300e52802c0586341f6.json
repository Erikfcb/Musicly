{"ast":null,"code":"import _defineProperty from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/src/components/games/Melody.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../actions\";\nimport { octaves, randomMelody } from \"../assets/notes/notes\";\n\nvar Melody =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Melody, _Component);\n\n  function Melody(props) {\n    var _this;\n\n    _classCallCheck(this, Melody);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Melody).call(this, props));\n    _this.state = {\n      progress: 0,\n      correct: 0,\n      tries: 0,\n      solution: \"\",\n      answer: \"\",\n      difficulty: \"1\",\n      C: \"blue\",\n      D: \"blue\",\n      E: \"blue\",\n      F: \"blue\",\n      G: \"blue\",\n      A: \"blue\",\n      B: \"blue\"\n    };\n    _this.getProgress = _this.getProgress.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.playSound = _this.playSound.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.difficulty = _this.difficulty.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.clearColors = _this.clearColors.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.playQuestion = _this.playQuestion.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Melody, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (localStorage.getItem(\"token\") !== null && !(\"melody\" in this.props.games)) {\n        this.props.fetchGames({\n          id: localStorage.getItem(\"token\")\n        });\n      }\n\n      this.setMelody();\n    }\n  }, {\n    key: \"getProgress\",\n    value: function () {\n      var _getProgress = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(lvl) {\n        var level;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(this.props.games);\n                level = lvl.toLowerCase();\n\n                if (\"melody\" in this.props.games) {\n                  if (this.props.games.melody[level].tries !== this.state.tries) {\n                    this.setState({\n                      progress: this.props.games.melody[level].correct * 100 / this.props.games.melody[level].tries,\n                      tries: this.props.games.melody[level].tries,\n                      correct: this.props.games.melody[level].correct\n                    });\n                  }\n                }\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getProgress(_x) {\n        return _getProgress.apply(this, arguments);\n      }\n\n      return getProgress;\n    }()\n  }, {\n    key: \"clearColors\",\n    value: function clearColors() {\n      this.setState({\n        C: \"blue\",\n        D: \"blue\",\n        E: \"blue\",\n        F: \"blue\",\n        G: \"blue\",\n        A: \"blue\",\n        B: \"blue\"\n      });\n    }\n  }, {\n    key: \"difficulty\",\n    value: function difficulty(e) {\n      this.clearColors();\n      this.setState({\n        difficulty: e.target.id\n      });\n    }\n  }, {\n    key: \"setMelody\",\n    value: function setMelody() {\n      var sounds = randomMelody();\n      console.log(sounds);\n      var melody = this.state.difficulty == 2 ? sounds.medium : this.state.difficulty == 3 ? sounds.hard : sounds.easy;\n      console.log(melody);\n      var solution = melody.reduce(function (acc, note) {\n        acc = acc + note.name;\n        return acc;\n      }, \"\");\n      this.setState({\n        solution: solution\n      });\n    }\n  }, {\n    key: \"playQuestion\",\n    value: function playQuestion() {\n      this.state.melody.forEach(function (note) {\n        var audio = new Audio(note.sound);\n        setTimeout(function () {\n          audio.play();\n        }, 1000);\n      });\n    }\n  }, {\n    key: \"playSound\",\n    value: function playSound(note) {\n      var audio = new Audio(note.sound);\n      audio.play();\n      this.setState(_defineProperty({\n        answer: this.state.answer + note.name\n      }, note.name, \"teal\"));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var precentage = this.state.progress + \"%\";\n      var level = this.state.difficulty == 2 ? \"Medium\" : this.state.difficulty == 3 ? \"Hard\" : \"Easy\";\n      var buttons = octaves.c3.map(function (note) {\n        return React.createElement(\"button\", {\n          onClick: function onClick() {\n            return _this2.playSound(note.sound);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }, note.name);\n      });\n      this.getProgress(level);\n      return React.createElement(\"div\", {\n        className: \"melody\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"question\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.playQuestion,\n        className: \"btn green sound\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \"Play\"), React.createElement(\"p\", {\n        style: {\n          fontSize: \"1.5em\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"Click \\\"Play\\\" to hear the note\"), React.createElement(\"p\", {\n        style: {\n          fontSize: \"1.5em\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, \"Progress: (\", this.state.correct, \"/\", this.state.tries, \")\", \" \", Math.floor(this.state.progress), \"%\"), React.createElement(\"div\", {\n        class: \"progress\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"determinate\",\n        style: {\n          width: precentage\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"answers\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, buttons), React.createElement(\"div\", {\n        className: \"difficulties\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn  waves-light\",\n        id: \"1\",\n        onClick: this.difficulty,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \"Easy\"), React.createElement(\"button\", {\n        className: \"btn  waves-light\",\n        id: \"2\",\n        onClick: this.difficulty,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, \"Medium\"), React.createElement(\"button\", {\n        className: \"btn  waves-light\",\n        id: \"3\",\n        onClick: this.difficulty,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, \"Hard\")));\n    }\n  }]);\n\n  return Melody;\n}(Component);\n\nfunction mapStateToProps(_ref) {\n  var auth = _ref.auth,\n      games = _ref.games;\n  // to be able to use this.props.game\n  return {\n    auth: auth,\n    games: games\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Melody);","map":{"version":3,"sources":["/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/src/components/games/Melody.js"],"names":["React","Component","axios","connect","actions","octaves","randomMelody","Melody","props","state","progress","correct","tries","solution","answer","difficulty","C","D","E","F","G","A","B","getProgress","bind","playSound","clearColors","playQuestion","localStorage","getItem","games","fetchGames","id","setMelody","lvl","console","log","level","toLowerCase","melody","setState","e","target","sounds","medium","hard","easy","reduce","acc","note","name","forEach","audio","Audio","sound","setTimeout","play","precentage","buttons","c3","map","fontSize","Math","floor","width","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../actions\";\nimport { octaves, randomMelody } from \"../assets/notes/notes\";\n\nclass Melody extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      progress: 0,\n      correct: 0,\n      tries: 0,\n      solution: \"\",\n      answer: \"\",\n      difficulty: \"1\",\n      C: \"blue\",\n      D: \"blue\",\n      E: \"blue\",\n      F: \"blue\",\n      G: \"blue\",\n      A: \"blue\",\n      B: \"blue\"\n    };\n    this.getProgress = this.getProgress.bind(this);\n    this.playSound = this.playSound.bind(this);\n    this.difficulty = this.difficulty.bind(this);\n    this.clearColors = this.clearColors.bind(this);\n    this.playQuestion = this.playQuestion.bind(this);\n  }\n\n  componentDidMount() {\n    if (\n      localStorage.getItem(\"token\") !== null &&\n      !(\"melody\" in this.props.games)\n    ) {\n      this.props.fetchGames({ id: localStorage.getItem(\"token\") });\n    }\n    this.setMelody();\n  }\n\n  async getProgress(lvl) {\n    console.log(this.props.games);\n    const level = lvl.toLowerCase();\n    if (\"melody\" in this.props.games) {\n      if (this.props.games.melody[level].tries !== this.state.tries) {\n        this.setState({\n          progress:\n            (this.props.games.melody[level].correct * 100) /\n            this.props.games.melody[level].tries,\n          tries: this.props.games.melody[level].tries,\n          correct: this.props.games.melody[level].correct\n        });\n      }\n    }\n  }\n\n  clearColors() {\n    this.setState({\n      C: \"blue\",\n      D: \"blue\",\n      E: \"blue\",\n      F: \"blue\",\n      G: \"blue\",\n      A: \"blue\",\n      B: \"blue\"\n    });\n  }\n\n  difficulty(e) {\n    this.clearColors();\n    this.setState({\n      difficulty: e.target.id\n    });\n  }\n\n  setMelody() {\n    const sounds = randomMelody();\n    console.log(sounds);\n\n    const melody =\n      this.state.difficulty == 2\n        ? sounds.medium\n        : this.state.difficulty == 3\n        ? sounds.hard\n        : sounds.easy;\n    console.log(melody);\n\n    const solution = melody.reduce((acc, note) => {\n      acc = acc + note.name;\n      return acc;\n    }, \"\");\n\n    this.setState({\n      solution\n    });\n  }\n\n  playQuestion() {\n    this.state.melody.forEach(note => {\n      const audio = new Audio(note.sound);\n      setTimeout(() => {\n        audio.play();\n      }, 1000);\n    });\n  }\n\n  playSound(note) {\n    const audio = new Audio(note.sound);\n    audio.play();\n    this.setState({\n      answer: this.state.answer + note.name,\n      [note.name]: \"teal\"\n    });\n  }\n  render() {\n    const precentage = this.state.progress + \"%\";\n\n    const level =\n      this.state.difficulty == 2\n        ? \"Medium\"\n        : this.state.difficulty == 3\n        ? \"Hard\"\n        : \"Easy\";\n\n    const buttons = octaves.c3.map(note => {\n      return (\n        <button onClick={() => this.playSound(note.sound)}>{note.name}</button>\n      );\n    });\n\n    this.getProgress(level);\n\n    return (\n      <div className=\"melody\">\n        <div className=\"question\">\n          <button onClick={this.playQuestion} className=\"btn green sound\">\n            Play\n          </button>\n          <p style={{ fontSize: \"1.5em\" }}>Click \"Play\" to hear the note</p>\n          <p style={{ fontSize: \"1.5em\" }}>\n            Progress: ({this.state.correct}/{this.state.tries}){\" \"}\n            {Math.floor(this.state.progress)}%\n          </p>\n          <div class=\"progress\">\n            <div class=\"determinate\" style={{ width: precentage }} />\n          </div>\n        </div>\n\n        <div className=\"answers\">{buttons}</div>\n\n        <div className=\"difficulties\">\n          <button className=\"btn  waves-light\" id=\"1\" onClick={this.difficulty}>\n            Easy\n          </button>\n          <button className=\"btn  waves-light\" id=\"2\" onClick={this.difficulty}>\n            Medium\n          </button>\n          <button className=\"btn  waves-light\" id=\"3\" onClick={this.difficulty}>\n            Hard\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps({ auth, games }) {\n  // to be able to use this.props.game\n  return { auth, games };\n}\n\nexport default connect(\n  mapStateToProps,\n  actions\n)(Melody);\n"]},"metadata":{},"sourceType":"module"}