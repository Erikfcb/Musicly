{"ast":null,"code":"import _regeneratorRuntime from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/src/components/games/GuessTheNote.js\";\nimport React, { Component } from \"react\";\nimport { octaves, all } from \"../assets/notes/notes\";\nimport \"./GuessTheNote.css\";\n\nvar GuessTheNote =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GuessTheNote, _Component);\n\n  function GuessTheNote(props) {\n    var _this;\n\n    _classCallCheck(this, GuessTheNote);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GuessTheNote).call(this, props));\n    _this.state = {\n      question: all[Math.floor(Math.random() * all.length)]\n    };\n    return _this;\n  }\n\n  _createClass(GuessTheNote, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var right =\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee() {\n          var res;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return axios.post('/api/progress', {\n                    id: localstorage.getItem('token'),\n                    correct: true,\n                    game: 'GuessTheNote'\n                  });\n\n                case 2:\n                  res = _context.sent;\n                  return _context.abrupt(\"return\", res.data);\n\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        return function right() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      var wrong =\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee2() {\n          var res;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return axios.post('/api/updateProgress', {\n                    id: localstorage.getItem('token'),\n                    correct: false,\n                    game: 'GuessTheNote'\n                  });\n\n                case 2:\n                  res = _context2.sent;\n                  return _context2.abrupt(\"return\", res.data);\n\n                case 4:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n\n        return function wrong() {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n\n      var clear = false;\n      var progress = \"\";\n\n      var playAnswer = function playAnswer(sound, name) {\n        var audio = new Audio(sound);\n        audio.play();\n\n        if (answer === _this2.state.question.name) {\n          // if the user's right\n          clear = true;\n          progress = right();\n        }\n\n        if (answer !== _this2.state.question.name) {\n          // if the user's wrong\n          progress = wrong();\n        }\n      };\n\n      var playQuestion = function playQuestion(note) {\n        var audio = new Audio(note);\n        audio.play();\n      };\n\n      var buttons = octaves.c3.map(function (note) {\n        return React.createElement(\"button\", {\n          onClick: function onClick() {\n            return playAnswer(note.sound, note.name);\n          },\n          className: \"btn blue sound waves-effect waves-light\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, note.name);\n      });\n      return React.createElement(\"div\", {\n        className: \"guessTheNote\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"question\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: function onClick() {\n          return playQuestion(_this2.state.question.sound);\n        },\n        className: \"btn teal sound waves-effect waves-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"?\"), React.createElement(\"p\", {\n        style: {\n          fontSize: \"1.5em\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"Click the \\\"?\\\" to hear again\")), React.createElement(\"div\", {\n        className: \"answers\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, buttons), React.createElement(\"p\", {\n        style: {\n          fontSize: \"1.5em\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Click the note that fits to the sound you just heard.\"));\n    }\n  }]);\n\n  return GuessTheNote;\n}(Component);\n\nexport default GuessTheNote;","map":{"version":3,"sources":["/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/src/components/games/GuessTheNote.js"],"names":["React","Component","octaves","all","GuessTheNote","props","state","question","Math","floor","random","length","right","axios","post","id","localstorage","getItem","correct","game","res","data","wrong","clear","progress","playAnswer","sound","name","audio","Audio","play","answer","playQuestion","note","buttons","c3","map","fontSize"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { octaves, all } from \"../assets/notes/notes\";\nimport \"./GuessTheNote.css\";\n\nclass GuessTheNote extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      question: all[Math.floor(Math.random() * all.length)]\n    };\n  }\n  render() {\n    const right = async () => {\n      const res = await axios.post('/api/progress', {id: localstorage.getItem('token'), correct: true, game: 'GuessTheNote'});\n      return res.data;\n    }\n\n    const wrong = async () => {\n      const res = await axios.post('/api/updateProgress', {id: localstorage.getItem('token'), correct: false, game: 'GuessTheNote'});\n      return res.data;\n    }\n\n    let clear = false;\n    let progress = \"\";\n    const playAnswer = (sound, name) => {\n      const audio = new Audio(sound);\n      audio.play();\n      if (answer === this.state.question.name) {\n        // if the user's right\n        clear = true;\n        progress = right();\n      }\n      if (answer !== this.state.question.name) {\n        // if the user's wrong\n        progress = wrong();\n      }\n    };\n\n    const playQuestion = note => {\n      const audio = new Audio(note);\n      audio.play();\n    };\n\n    const buttons = octaves.c3.map(note => {\n      return (\n        <button\n          onClick={() => playAnswer(note.sound, note.name)}\n          className=\"btn blue sound waves-effect waves-light\"\n        >\n          {note.name}\n        </button>\n      );\n    });\n\n    return (\n      <div className=\"guessTheNote\">\n        <div className=\"question\">\n          <button\n            onClick={() => playQuestion(this.state.question.sound)}\n            className=\"btn teal sound waves-effect waves-light\"\n          >\n            ?\n          </button>\n          <p style={{ fontSize: \"1.5em\" }}>Click the \"?\" to hear again</p>\n        </div>\n        <div className=\"answers\">{buttons}</div>\n        <p style={{ fontSize: \"1.5em\" }}>\n          Click the note that fits to the sound you just heard.\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default GuessTheNote;\n"]},"metadata":{},"sourceType":"module"}