{"ast":null,"code":"import _defineProperty from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/src/components/games/Melody/index.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../../actions\";\nimport { octaves, randomMelody } from \"../../assets/notes/notes\";\nimport \"./Melody.css\";\n\nvar Melody =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Melody, _Component);\n\n  function Melody(props) {\n    var _this;\n\n    _classCallCheck(this, Melody);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Melody).call(this, props));\n    _this.state = {\n      feedback: React.createElement(\"div\", {\n        style: {\n          fontSize: \"1.5em\",\n          marginTop: \"20px\",\n          opacity: \"0\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }, \"empty\"),\n      progress: 0,\n      correct: 0,\n      tries: 0,\n      melody: [],\n      solution: \"\",\n      answer: \"\",\n      difficulty: \"1\",\n      C: \"blue\",\n      D: \"blue\",\n      E: \"blue\",\n      F: \"blue\",\n      G: \"blue\",\n      A: \"blue\",\n      B: \"blue\"\n    };\n    _this.getProgress = _this.getProgress.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.playSound = _this.playSound.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.difficulty = _this.difficulty.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.clearColors = _this.clearColors.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.playQuestion = _this.playQuestion.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setMelody = _this.setMelody.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.reset = _this.reset.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.checkCorrect = _this.checkCorrect.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Melody, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (localStorage.getItem(\"token\") !== null && !(\"melody\" in this.props.games)) {\n        this.props.fetchGames({\n          token: localStorage.getItem(\"token\")\n        });\n      }\n\n      this.setMelody(this.state.difficulty);\n    }\n  }, {\n    key: \"getProgress\",\n    value: function getProgress(lvl) {\n      var level = lvl.toLowerCase();\n\n      if (\"melody\" in this.props.games) {\n        if (this.props.games.melody[level].tries !== this.state.tries) {\n          this.setState({\n            progress: this.props.games.melody[level].correct * 100 / this.props.games.melody[level].tries,\n            tries: this.props.games.melody[level].tries,\n            correct: this.props.games.melody[level].correct\n          });\n        }\n      }\n    }\n  }, {\n    key: \"clearColors\",\n    value: function clearColors() {\n      this.setState({\n        C: \"blue\",\n        D: \"blue\",\n        E: \"blue\",\n        F: \"blue\",\n        G: \"blue\",\n        A: \"blue\",\n        B: \"blue\"\n      });\n    }\n  }, {\n    key: \"difficulty\",\n    value: function difficulty(e) {\n      this.clearColors();\n      this.setState({\n        difficulty: e.target.id\n      });\n      this.setMelody(e.target.id);\n    }\n  }, {\n    key: \"setMelody\",\n    value: function setMelody(diff) {\n      var sounds = randomMelody();\n      var melody = diff == 2 ? sounds.medium : diff == 3 ? sounds.hard : sounds.easy;\n      var solution = melody.reduce(function (acc, note) {\n        acc = acc + note.name;\n        return acc;\n      }, \"\");\n      this.setState({\n        solution: solution,\n        melody: melody\n      });\n    }\n  }, {\n    key: \"playQuestion\",\n    value: function playQuestion() {\n      var time = 0;\n      this.state.melody.forEach(function (note) {\n        var audio = new Audio(note.sound);\n        setTimeout(function () {\n          audio.play();\n        }, time);\n        time += 1000;\n      });\n    }\n  }, {\n    key: \"playSound\",\n    value: function playSound(note) {\n      var _this$setState;\n\n      var audio = new Audio(note.sound);\n      audio.play();\n      this.setState((_this$setState = {\n        answer: this.state.answer + note.name\n      }, _defineProperty(_this$setState, note.name, \"blue lighten-3\"), _defineProperty(_this$setState, \"feedback\", React.createElement(\"div\", {\n        style: {\n          fontSize: \"1.5em\",\n          marginTop: \"20px\",\n          opacity: \"0\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"empty\")), _this$setState));\n    }\n  }, {\n    key: \"checkCorrect\",\n    value: function checkCorrect(level) {\n      var _this2 = this;\n\n      if (this.state.answer.length == this.state.solution.length && this.state.answer != this.state.solution) {\n        setTimeout(function () {\n          _this2.props.fetchGames({\n            token: localStorage.getItem(\"token\")\n          });\n        }, 500);\n        axios({\n          method: 'POST',\n          url: \"/api/updateProgress\",\n          data: {\n            game: \"melody\",\n            correct: false,\n            level: level\n          },\n          headers: {\n            'authorization': localStorage.getItem('token')\n          }\n        });\n        this.reset();\n        this.setState({\n          feedback: React.createElement(\"div\", {\n            className: \"feedback\",\n            style: {\n              color: \"red\",\n              fontSize: \"1.5em\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 152\n            },\n            __self: this\n          }, \"Try again...\")\n        });\n      }\n\n      if (this.state.answer == this.state.solution && this.state.answer !== \"\") {\n        setTimeout(function () {\n          _this2.props.fetchGames({\n            token: localStorage.getItem(\"token\")\n          });\n        }, 500);\n        axios({\n          method: 'POST',\n          url: \"/api/updateProgress\",\n          data: {\n            game: \"melody\",\n            correct: true,\n            level: level\n          },\n          headers: {\n            'authorization': localStorage.getItem('token')\n          }\n        });\n        this.setMelody(this.state.difficulty);\n        this.reset();\n        setTimeout(function () {\n          _this2.playQuestion();\n        }, 1000);\n        this.setState({\n          feedback: React.createElement(\"div\", {\n            className: \"feedback\",\n            style: {\n              color: \"green\",\n              fontSize: \"1.5em\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 183\n            },\n            __self: this\n          }, \"Well done!\")\n        });\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.setState({\n        answer: \"\"\n      });\n      this.clearColors();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var precentage = isNaN(this.state.progress) ? \"0%\" : this.state.progress + '%';\n      var level = this.state.difficulty == 2 ? \"Medium\" : this.state.difficulty == 3 ? \"Hard\" : \"Easy\";\n      var buttons = octaves.c3.map(function (note) {\n        return React.createElement(\"button\", {\n          className: \"btn sound \" + _this3.state[note.name],\n          onClick: function onClick() {\n            return _this3.playSound(note);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212\n          },\n          __self: this\n        }, note.name);\n      });\n      this.getProgress(level);\n      this.checkCorrect(level);\n      return React.createElement(\"div\", {\n        className: \"melody container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"question\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.playQuestion,\n        className: \"btn green sound\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, \"Play\"), React.createElement(\"p\", {\n        style: {\n          fontSize: \"1.5em\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, \"Click \\\"Play\\\" to hear the note\"), React.createElement(\"p\", {\n        style: {\n          fontSize: \"1.5em\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, \"Progress: (\", this.state.correct, \"/\", this.state.tries, \")\", \" \", Math.floor(this.state.progress), \"%\"), React.createElement(\"div\", {\n        class: \"progress\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"determinate\",\n        style: {\n          width: precentage\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }))), React.createElement(\"button\", {\n        className: \"btn red resetAnswer\",\n        onClick: this.reset,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, \"Reset your answer\"), this.state.feedback, React.createElement(\"div\", {\n        className: \"answers\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, buttons), React.createElement(\"p\", {\n        style: {\n          color: \"teal\",\n          fontSize: \"1.5em\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, \"Level: \", level), React.createElement(\"div\", {\n        className: \"difficulties\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn  waves-light\",\n        id: \"1\",\n        onClick: this.difficulty,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, \"Easy\"), React.createElement(\"button\", {\n        className: \"btn  waves-light\",\n        id: \"2\",\n        onClick: this.difficulty,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, \"Medium\"), React.createElement(\"button\", {\n        className: \"btn  waves-light\",\n        id: \"3\",\n        onClick: this.difficulty,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }, \"Hard\")));\n    }\n  }]);\n\n  return Melody;\n}(Component);\n\nfunction mapStateToProps(_ref) {\n  var auth = _ref.auth,\n      games = _ref.games;\n  return {\n    auth: auth,\n    games: games\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Melody);","map":{"version":3,"sources":["/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/src/components/games/Melody/index.js"],"names":["React","Component","axios","connect","actions","octaves","randomMelody","Melody","props","state","feedback","fontSize","marginTop","opacity","progress","correct","tries","melody","solution","answer","difficulty","C","D","E","F","G","A","B","getProgress","bind","playSound","clearColors","playQuestion","setMelody","reset","checkCorrect","localStorage","getItem","games","fetchGames","token","lvl","level","toLowerCase","setState","e","target","id","diff","sounds","medium","hard","easy","reduce","acc","note","name","time","forEach","audio","Audio","sound","setTimeout","play","length","method","url","data","game","headers","color","precentage","isNaN","buttons","c3","map","Math","floor","width","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../../actions\";\nimport { octaves, randomMelody } from \"../../assets/notes/notes\";\nimport \"./Melody.css\";\n\nclass Melody extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      feedback: (\n        <div style={{ fontSize: \"1.5em\", marginTop: \"20px\", opacity: \"0\" }}>\n          empty\n        </div>\n      ),\n      progress: 0,\n      correct: 0,\n      tries: 0,\n      melody: [],\n      solution: \"\",\n      answer: \"\",\n      difficulty: \"1\",\n      C: \"blue\",\n      D: \"blue\",\n      E: \"blue\",\n      F: \"blue\",\n      G: \"blue\",\n      A: \"blue\",\n      B: \"blue\"\n    };\n    this.getProgress = this.getProgress.bind(this);\n    this.playSound = this.playSound.bind(this);\n    this.difficulty = this.difficulty.bind(this);\n    this.clearColors = this.clearColors.bind(this);\n    this.playQuestion = this.playQuestion.bind(this);\n    this.setMelody = this.setMelody.bind(this);\n    this.reset = this.reset.bind(this);\n    this.checkCorrect = this.checkCorrect.bind(this);\n  }\n\n  componentDidMount() {\n    if (\n      localStorage.getItem(\"token\") !== null &&\n      !(\"melody\" in this.props.games)\n    ) {\n      this.props.fetchGames({ token: localStorage.getItem(\"token\") });\n    }\n    this.setMelody(this.state.difficulty);\n  }\n\n  getProgress(lvl) {\n    const level = lvl.toLowerCase();\n    if (\"melody\" in this.props.games) {\n      if (this.props.games.melody[level].tries !== this.state.tries) {\n        this.setState({\n          progress:\n            (this.props.games.melody[level].correct * 100) /\n            this.props.games.melody[level].tries,\n          tries: this.props.games.melody[level].tries,\n          correct: this.props.games.melody[level].correct\n        });\n      }\n    }\n  }\n\n  clearColors() {\n    this.setState({\n      C: \"blue\",\n      D: \"blue\",\n      E: \"blue\",\n      F: \"blue\",\n      G: \"blue\",\n      A: \"blue\",\n      B: \"blue\"\n    });\n  }\n\n  difficulty(e) {\n    this.clearColors();\n    this.setState({\n      difficulty: e.target.id\n    });\n    this.setMelody(e.target.id);\n  }\n\n  setMelody(diff) {\n    const sounds = randomMelody();\n    const melody =\n      diff == 2 ? sounds.medium : diff == 3 ? sounds.hard : sounds.easy;\n\n    const solution = melody.reduce((acc, note) => {\n      acc = acc + note.name;\n      return acc;\n    }, \"\");\n\n    this.setState({\n      solution,\n      melody\n    });\n  }\n\n  playQuestion() {\n    let time = 0;\n    this.state.melody.forEach(note => {\n      const audio = new Audio(note.sound);\n      setTimeout(() => {\n        audio.play();\n      }, time);\n      time += 1000;\n    });\n  }\n\n  playSound(note) {\n    const audio = new Audio(note.sound);\n    audio.play();\n    this.setState({\n      answer: this.state.answer + note.name,\n      [note.name]: \"blue lighten-3\",\n      feedback: (\n        <div style={{ fontSize: \"1.5em\", marginTop: \"20px\", opacity: \"0\" }}>\n          empty\n        </div>\n      )\n    });\n  }\n\n  checkCorrect(level) {\n    if (\n      this.state.answer.length == this.state.solution.length &&\n      this.state.answer != this.state.solution\n    ) {\n      setTimeout(() => {\n        this.props.fetchGames({ token: localStorage.getItem(\"token\") });\n      }, 500);\n      axios({\n        method: 'POST',\n        url: \"/api/updateProgress\",\n        data: {\n          game: \"melody\",\n          correct: false,\n          level: level\n        },\n        headers: {\n          'authorization': localStorage.getItem('token')\n        }\n      });\n\n      this.reset();\n      this.setState({\n        feedback: (\n          <div className=\"feedback\" style={{ color: \"red\", fontSize: \"1.5em\" }}>\n            Try again...\n          </div>\n        )\n      });\n    }\n\n    if (this.state.answer == this.state.solution && this.state.answer !== \"\") {\n      setTimeout(() => {\n        this.props.fetchGames({ token: localStorage.getItem(\"token\") });\n      }, 500);\n      axios({\n        method: 'POST',\n        url: \"/api/updateProgress\",\n        data: {\n          game: \"melody\",\n          correct: true,\n          level: level\n        },\n        headers: {\n          'authorization': localStorage.getItem('token')\n        }\n      });\n\n      this.setMelody(this.state.difficulty);\n      this.reset();\n      setTimeout(() => {\n        this.playQuestion();\n      }, 1000);\n      this.setState({\n        feedback: (\n          <div\n            className=\"feedback\"\n            style={{ color: \"green\", fontSize: \"1.5em\" }}\n          >\n            Well done!\n          </div>\n        )\n      });\n    }\n  }\n  reset() {\n    this.setState({\n      answer: \"\"\n    });\n    this.clearColors();\n  }\n\n  render() {\n    const precentage = isNaN(this.state.progress)? \"0%\": this.state.progress + '%';\n\n    const level =\n      this.state.difficulty == 2\n        ? \"Medium\"\n        : this.state.difficulty == 3\n        ? \"Hard\"\n        : \"Easy\";\n\n    const buttons = octaves.c3.map(note => {\n      return (\n        <button\n          className={\"btn sound \" + this.state[note.name]}\n          onClick={() => this.playSound(note)}\n        >\n          {note.name}\n        </button>\n      );\n    });\n\n    this.getProgress(level);\n    this.checkCorrect(level);\n    return (\n      <div className=\"melody container\">\n        <div className=\"question\">\n          <button onClick={this.playQuestion} className=\"btn green sound\">\n            Play\n          </button>\n          <p style={{ fontSize: \"1.5em\" }}>Click \"Play\" to hear the note</p>\n          <p style={{ fontSize: \"1.5em\" }}>\n            Progress: ({this.state.correct}/{this.state.tries}){\" \"}\n            {Math.floor(this.state.progress)}%\n          </p>\n          <div class=\"progress\">\n            <div class=\"determinate\" style={{ width: precentage }} />\n          </div>\n        </div>\n        <button className=\"btn red resetAnswer\" onClick={this.reset}>\n          Reset your answer\n        </button>\n\n        {this.state.feedback}\n\n        <div className=\"answers\">{buttons}</div>\n\n        <p style={{ color: \"teal\", fontSize: \"1.5em\" }}>Level: {level}</p>\n\n        <div className=\"difficulties\">\n          <button className=\"btn  waves-light\" id=\"1\" onClick={this.difficulty}>\n            Easy\n          </button>\n          <button className=\"btn  waves-light\" id=\"2\" onClick={this.difficulty}>\n            Medium\n          </button>\n          <button className=\"btn  waves-light\" id=\"3\" onClick={this.difficulty}>\n            Hard\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps({ auth, games }) {\n  return { auth, games };\n}\n\nexport default connect(\n  mapStateToProps,\n  actions\n)(Melody);\n"]},"metadata":{},"sourceType":"module"}