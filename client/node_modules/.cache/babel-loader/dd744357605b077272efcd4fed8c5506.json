{"ast":null,"code":"import _classCallCheck from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/src/components/Dashboard.js\";\n// going to show games\nimport React, { Component } from \"react\";\nimport GuessTheNote from \"./games/GuessTheNote\";\nimport Game from \"./Game\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions\";\n\nvar Dashboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Dashboard, _Component);\n\n  function Dashboard(props) {\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dashboard).call(this, props));\n    _this.state = {\n      rerender: false,\n      games: {}\n    };\n    _this.handleRender = _this.handleRender.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.renderGames = _this.renderGames.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Dashboard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var token = localStorage.getItem(\"token\");\n      this.props.fetchGames({\n        id: token\n      });\n    }\n  }, {\n    key: \"handleRender\",\n    value: function handleRender() {\n      var token = localStorage.getItem(\"token\");\n      this.props.fetchGames({\n        id: token\n      });\n      this.setState({\n        rerender: !this.state.rerender\n      });\n    }\n  }, {\n    key: \"renderGames\",\n    value: function renderGames() {\n      var games = {\n        guessTheNote: {\n          rerender: this.handleRender,\n          resetTitle: \"guessTheNote\",\n          route: \"/guessthenote\",\n          title: \"Guess The Note\",\n          description: \"You'll hear sound of a random note and guess which note it was.\",\n          progress: {\n            easy: this.props.games.guessTheNote.easy.correct * 100 / this.props.games.guessTheNote.easy.tries,\n            medium: this.props.games.guessTheNote.medium.correct * 100 / this.props.games.guessTheNote.medium.tries,\n            hard: this.props.games.guessTheNote.hard.correct * 100 / this.props.games.guessTheNote.hard.tries\n          }\n        },\n        intervals: {\n          rerender: this.handleRender,\n          resetTitle: \"intervals\",\n          route: \"/intervals\",\n          title: \"Intervals\",\n          description: \"You'll hear a sequence of 2 notes and decide whether the interval between those 2 notes is major 3rd, perfect 5th or an octave.\",\n          progress: {\n            easy: this.props.games.intervals.easy.correct * 100 / this.props.games.intervals.easy.tries,\n            medium: this.props.games.intervals.medium.correct * 100 / this.props.games.intervals.medium.tries,\n            hard: this.props.games.intervals.hard.correct * 100 / this.props.games.intervals.hard.tries\n          }\n        },\n        melody: {\n          rerender: this.handleRender,\n          resetTitle: \"melody\",\n          route: \"/melody\",\n          title: \"Melody chain\",\n          description: \"You'll hear a sequence of 2-3-4 notes from a given scale and try to repeat the notes.\",\n          progress: {\n            easy: this.props.games.melody.easy.correct * 100 / this.props.games.melody.easy.tries,\n            medium: this.props.games.melody.medium.correct * 100 / this.props.games.melody.medium.tries,\n            hard: this.props.games.melody.hard.correct * 100 / this.props.games.melody.hard.tries\n          }\n        },\n        chords: {\n          resetTitle: \"chords\",\n          rerender: this.handleRender,\n          route: \"/chords\",\n          title: \"Chords\",\n          description: \"You'll hear a chord and try to guess how many notes the chord contains.\",\n          progress: {\n            easy: this.props.games.chords.easy.correct * 100 / this.props.games.chords.easy.tries,\n            medium: this.props.games.chords.medium.correct * 100 / this.props.games.chords.medium.tries,\n            hard: this.props.games.chords.hard.correct * 100 / this.props.games.chords.hard.tries\n          }\n        }\n      };\n      this.setState({\n        games: games\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var games = {};\n      console.log(this.props.games);\n\n      var renderGames = function renderGames() {};\n\n      if (typeof this.props.games !== 'undefined') {\n        renderGames();\n      }\n\n      return React.createElement(\"div\", {\n        className: \"dashboard container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"Ear Training Practice\"), React.createElement(\"blockquote\", {\n        style: {\n          fontSize: '1.5em'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"These exercises will improve your musical ability by developing a more intuitive understanding of what you hear.\"), React.createElement(Game, {\n        game: games.guessTheNote,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }), React.createElement(Game, {\n        game: games.intervals,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Dashboard;\n}(Component);\n\nfunction mapStateToProps(_ref) {\n  var games = _ref.games;\n  // to be able to use this.props.auth\n  return {\n    games: games\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Dashboard); // export default Dashboard;","map":{"version":3,"sources":["/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/src/components/Dashboard.js"],"names":["React","Component","GuessTheNote","Game","connect","actions","Dashboard","props","state","rerender","games","handleRender","bind","renderGames","token","localStorage","getItem","fetchGames","id","setState","guessTheNote","resetTitle","route","title","description","progress","easy","correct","tries","medium","hard","intervals","melody","chords","console","log","fontSize","mapStateToProps"],"mappings":"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","sourcesContent":["// going to show games\nimport React, { Component } from \"react\";\nimport GuessTheNote from \"./games/GuessTheNote\";\nimport Game from \"./Game\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions\";\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rerender: false,\n      games: {}\n    };\n    this.handleRender = this.handleRender.bind(this);\n    this.renderGames = this.renderGames.bind(this);\n  }\n\n  componentDidMount() {\n    const token = localStorage.getItem(\"token\");\n    this.props.fetchGames({ id: token });\n\n  }\n\n  handleRender() {\n    const token = localStorage.getItem(\"token\");\n    this.props.fetchGames({ id: token });\n    this.setState({ rerender: !this.state.rerender });\n  }\n\n  renderGames() {\n    const games = {\n      guessTheNote: {\n        rerender: this.handleRender,\n        resetTitle: \"guessTheNote\",\n        route: \"/guessthenote\",\n        title: \"Guess The Note\",\n        description:\n          \"You'll hear sound of a random note and guess which note it was.\",\n        progress: {\n          easy:\n            (this.props.games.guessTheNote.easy.correct * 100) /\n            this.props.games.guessTheNote.easy.tries,\n          medium:\n            (this.props.games.guessTheNote.medium.correct * 100) /\n            this.props.games.guessTheNote.medium.tries,\n          hard:\n            (this.props.games.guessTheNote.hard.correct * 100) /\n            this.props.games.guessTheNote.hard.tries\n        }\n      },\n      intervals: {\n        rerender: this.handleRender,\n        resetTitle: \"intervals\",\n        route: \"/intervals\",\n        title: \"Intervals\",\n        description:\n          \"You'll hear a sequence of 2 notes and decide whether the interval between those 2 notes is major 3rd, perfect 5th or an octave.\",\n        progress: {\n          easy:\n            (this.props.games.intervals.easy.correct * 100) /\n            this.props.games.intervals.easy.tries,\n          medium:\n            (this.props.games.intervals.medium.correct * 100) /\n            this.props.games.intervals.medium.tries,\n          hard:\n            (this.props.games.intervals.hard.correct * 100) /\n            this.props.games.intervals.hard.tries\n        }\n      },\n      melody: {\n        rerender: this.handleRender,\n        resetTitle: \"melody\",\n        route: \"/melody\",\n        title: \"Melody chain\",\n        description:\n          \"You'll hear a sequence of 2-3-4 notes from a given scale and try to repeat the notes.\",\n        progress: {\n          easy:\n            (this.props.games.melody.easy.correct * 100) /\n            this.props.games.melody.easy.tries,\n          medium:\n            (this.props.games.melody.medium.correct * 100) /\n            this.props.games.melody.medium.tries,\n          hard:\n            (this.props.games.melody.hard.correct * 100) /\n            this.props.games.melody.hard.tries\n        }\n      },\n      chords: {\n        resetTitle: \"chords\",\n        rerender: this.handleRender,\n        route: \"/chords\",\n        title: \"Chords\",\n        description:\n          \"You'll hear a chord and try to guess how many notes the chord contains.\",\n        progress: {\n          easy:\n            (this.props.games.chords.easy.correct * 100) /\n            this.props.games.chords.easy.tries,\n          medium:\n            (this.props.games.chords.medium.correct * 100) /\n            this.props.games.chords.medium.tries,\n          hard:\n            (this.props.games.chords.hard.correct * 100) /\n            this.props.games.chords.hard.tries\n        }\n      }\n    };\n\n    this.setState({ games })\n  }\n  render() {\n    let games = {};\n    console.log(this.props.games);\n\n    const renderGames = () => {\n\n      \n    };\n\n    if (typeof this.props.games !== 'undefined') {\n      renderGames();\n    }\n    return (\n      <div className=\"dashboard container\">\n        <h1>Ear Training Practice</h1>\n        <blockquote style={{fontSize: '1.5em'}}>\n          These exercises will improve your musical ability by developing a more\n          intuitive understanding of what you hear.\n        </blockquote>\n        <Game game={games.guessTheNote} />\n        <Game game={games.intervals} />\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps({ games }) {\n  // to be able to use this.props.auth\n  return { games };\n}\n\nexport default connect(\n  mapStateToProps,\n  actions\n)(Dashboard);\n// export default Dashboard;"]},"metadata":{},"sourceType":"module"}