{"ast":null,"code":"import _defineProperty from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/src/components/games/GuessTheNote.js\";\nimport React, { Component } from \"react\";\nimport { octaves, all, twoOctaves } from \"../assets/notes/notes\";\nimport \"./GuessTheNote.css\";\nimport axios from \"axios\";\n\nvar GuessTheNote =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GuessTheNote, _Component);\n\n  function GuessTheNote(props) {\n    var _this;\n\n    _classCallCheck(this, GuessTheNote);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GuessTheNote).call(this, props));\n    _this.state = {\n      newSound: false,\n      difficulty: 1,\n      rerender: false,\n      progress: \"\",\n      tries: \"\",\n      correct: \"\",\n      C: \"blue\",\n      D: \"blue\",\n      E: \"blue\",\n      F: \"blue\",\n      G: \"blue\",\n      A: \"blue\",\n      B: \"blue\"\n    };\n    return _this;\n  }\n\n  _createClass(GuessTheNote, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var sounds = this.state.difficulty == 2 ? twoOctaves : this.state.difficulty == 3 ? all : octaves.c3;\n      var level = this.state.difficulty == 2 ? 'Medium' : this.state.difficulty == 3 ? 'Hard' : 'Easy'; // if (this.state.difficulty == 2) sounds = twoOctaves;\n      // if (this.state.difficulty == 2) sounds = all;\n\n      var answer = localStorage.getItem(\"guessTheNote\");\n      var clear = false;\n\n      var getProgress =\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee() {\n          var res;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return axios.post(\"/api/progress\", {\n                    level: level,\n                    id: localStorage.getItem(\"token\"),\n                    game: \"guessTheNote\"\n                  });\n\n                case 2:\n                  res = _context.sent;\n\n                  if (res.data.tries !== _this2.state.tries) {\n                    _this2.setState({\n                      progress: res.data.progress,\n                      tries: res.data.tries,\n                      correct: res.data.correct\n                    });\n                  }\n\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        return function getProgress() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      getProgress();\n\n      if (answer == null || this.state.newSound === true) {\n        localStorage.setItem(\"guessTheNote\", Math.floor(Math.random() * sounds.length));\n        this.setState({\n          newSound: false\n        });\n      }\n\n      var change = function change(name, correct) {\n        if (!correct) {\n          axios.post(\"/api/updateProgress\", {\n            game: \"guessTheNote\",\n            correct: false,\n            id: localStorage.getItem(\"token\"),\n            level: level\n          });\n\n          _this2.setState(_defineProperty({}, name, \"red\"));\n        }\n\n        if (correct) {\n          axios.post(\"/api/updateProgress\", {\n            game: \"guessTheNote\",\n            correct: true,\n            id: localStorage.getItem(\"token\"),\n            level: level\n          });\n\n          _this2.setState(_defineProperty({}, name, \"green\"));\n        }\n      };\n\n      var clearColors = function clearColors() {\n        _this2.setState({\n          C: \"blue\",\n          D: \"blue\",\n          E: \"blue\",\n          F: \"blue\",\n          G: \"blue\",\n          A: \"blue\",\n          B: \"blue\"\n        });\n      };\n\n      var rerender = function rerender() {\n        _this2.setState({\n          rerender: !rerender\n        });\n      };\n\n      var playAnswer = function playAnswer(sound, name) {\n        var audio = new Audio(sound);\n        audio.play();\n\n        if (name === sounds[answer].name) {\n          console.log(\"right\"); // if the user's right\n\n          localStorage.setItem(\"guessTheNote\", Math.floor(Math.random() * sounds.length));\n          change(name, true);\n          setTimeout(function () {\n            clearColors();\n            playQuestion(sounds[localStorage.getItem(\"guessTheNote\")].sound);\n          }, 1000);\n        }\n\n        if (name !== sounds[answer].name) {\n          console.log(\"wrong\"); // if the user's wrong\n\n          change(name, false);\n          setTimeout(function () {\n            rerender();\n          }, 500);\n        }\n      };\n\n      var playQuestion = function playQuestion(note) {\n        var audio = new Audio(note);\n        audio.play();\n      };\n\n      var buttons = octaves.c3.map(function (note) {\n        return React.createElement(\"button\", {\n          onClick: function onClick() {\n            return playAnswer(note.sound, note.name);\n          },\n          className: \"btn  sound waves-effect waves-light \" + _this2.state[note.name],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }, note.name);\n      });\n\n      var difficulty = function difficulty(e) {\n        clearColors();\n\n        _this2.setState({\n          difficulty: e.target.id,\n          newSound: true\n        });\n      };\n\n      return React.createElement(\"div\", {\n        className: \"guessTheNote\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"question\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: function onClick() {\n          return playQuestion(sounds[answer].sound);\n        },\n        className: \"btn teal sound waves-effect waves-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, \"Play\"), React.createElement(\"p\", {\n        style: {\n          fontSize: \"1.5em\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \"Click the button to hear again\"), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return playQuestion(sounds[0].sound);\n        },\n        className: \"btn teal sound waves-effect waves-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, \"C\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"reference note\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, \" \", \"progress: (\", this.state.correct, \"/\", this.state.tries, \")\", \" \", Math.floor(this.state.progress), \"%\", \" \")), React.createElement(\"div\", {\n        className: \"answers\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, buttons), React.createElement(\"p\", {\n        style: {\n          fontSize: \"1.5em\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, \"Click the note that fits to the sound you just heard.\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, level), React.createElement(\"div\", {\n        className: \"difficulties\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn\",\n        id: \"1\",\n        onClick: difficulty,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, \"Easy\"), React.createElement(\"button\", {\n        className: \"btn\",\n        id: \"2\",\n        onClick: difficulty,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, \"Medium\"), React.createElement(\"button\", {\n        className: \"btn\",\n        id: \"3\",\n        onClick: difficulty,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, \"Hard\")));\n    }\n  }]);\n\n  return GuessTheNote;\n}(Component);\n\nexport default GuessTheNote;","map":{"version":3,"sources":["/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/src/components/games/GuessTheNote.js"],"names":["React","Component","octaves","all","twoOctaves","axios","GuessTheNote","props","state","newSound","difficulty","rerender","progress","tries","correct","C","D","E","F","G","A","B","sounds","c3","level","answer","localStorage","getItem","clear","getProgress","post","id","game","res","data","setState","setItem","Math","floor","random","length","change","name","clearColors","playAnswer","sound","audio","Audio","play","console","log","setTimeout","playQuestion","note","buttons","map","e","target","fontSize"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { octaves, all, twoOctaves } from \"../assets/notes/notes\";\nimport \"./GuessTheNote.css\";\nimport axios from \"axios\";\n\nclass GuessTheNote extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newSound: false,\n      difficulty: 1,\n      rerender: false,\n      progress: \"\",\n      tries: \"\",\n      correct: \"\",\n      C: \"blue\",\n      D: \"blue\",\n      E: \"blue\",\n      F: \"blue\",\n      G: \"blue\",\n      A: \"blue\",\n      B: \"blue\"\n    };\n  }\n  render() {\n    const sounds = this.state.difficulty == 2? twoOctaves: this.state.difficulty == 3? all: octaves.c3;\n    const level = this.state.difficulty == 2? 'Medium': this.state.difficulty == 3? 'Hard': 'Easy';\n    // if (this.state.difficulty == 2) sounds = twoOctaves;\n    // if (this.state.difficulty == 2) sounds = all;\n    let answer = localStorage.getItem(\"guessTheNote\");\n\n    let clear = false;\n\n    const getProgress = async () => {\n      const res = await axios.post(\"/api/progress\", {\n        level: level,\n        id: localStorage.getItem(\"token\"),\n        game: \"guessTheNote\"\n      });\n\n      if (res.data.tries !== this.state.tries) {\n        this.setState({\n          progress: res.data.progress,\n          tries: res.data.tries,\n          correct: res.data.correct\n        });\n      }\n    };\n    getProgress();\n\n    if (answer == null || this.state.newSound === true) {\n      localStorage.setItem(\n        \"guessTheNote\",\n        Math.floor(Math.random() * sounds.length)\n      );\n      this.setState({newSound: false});\n    }\n\n    const change = (name, correct) => {\n      if (!correct) {\n        axios.post(\"/api/updateProgress\", {\n          game: \"guessTheNote\",\n          correct: false,\n          id: localStorage.getItem(\"token\"),\n          level: level\n        });\n        this.setState({ [name]: \"red\" });\n      }\n\n      if (correct) {\n        axios.post(\"/api/updateProgress\", {\n          game: \"guessTheNote\",\n          correct: true,\n          id: localStorage.getItem(\"token\"),\n          level: level\n        });\n        this.setState({ [name]: \"green\" });\n      }\n    };\n\n    const clearColors = () => {\n      this.setState({\n        C: \"blue\",\n        D: \"blue\",\n        E: \"blue\",\n        F: \"blue\",\n        G: \"blue\",\n        A: \"blue\",\n        B: \"blue\"\n      });\n    };\n    const rerender = () => {\n      this.setState({ rerender: !rerender });\n    };\n    const playAnswer = (sound, name) => {\n      const audio = new Audio(sound);\n      audio.play();\n      if (name === sounds[answer].name) {\n        console.log(\"right\");\n        // if the user's right\n        localStorage.setItem(\n          \"guessTheNote\",\n          Math.floor(Math.random() * sounds.length)\n        );\n        change(name, true);\n        setTimeout(() => {\n          clearColors();\n          playQuestion(sounds[localStorage.getItem(\"guessTheNote\")].sound);\n        }, 1000);\n      }\n      if (name !== sounds[answer].name) {\n        console.log(\"wrong\");\n        // if the user's wrong\n        change(name, false);\n        setTimeout(() => {\n          rerender();\n        }, 500);\n      }\n    };\n\n    const playQuestion = note => {\n      const audio = new Audio(note);\n      audio.play();\n    };\n\n    const buttons = octaves.c3.map(note => {\n      return (\n        <button\n          onClick={() => playAnswer(note.sound, note.name)}\n          className={\n            \"btn  sound waves-effect waves-light \" + this.state[note.name]\n          }\n        >\n          {note.name}\n        </button>\n      );\n    });\n\n    const difficulty = e => {\n      clearColors();\n      this.setState({ difficulty: e.target.id, newSound: true });\n    };\n\n    return (\n      <div className=\"guessTheNote\">\n        <div className=\"question\">\n          <button\n            onClick={() => playQuestion(sounds[answer].sound)}\n            className=\"btn teal sound waves-effect waves-light\"\n          >\n            Play\n          </button>\n          <p style={{ fontSize: \"1.5em\" }}>Click the button to hear again</p>\n          <button\n            onClick={() => playQuestion(sounds[0].sound)}\n            className=\"btn teal sound waves-effect waves-light\"\n          >\n            C\n          </button>\n          <p>reference note</p>\n          <p>\n            {\" \"}\n            progress: ({this.state.correct}/{this.state.tries}){\" \"}\n            {Math.floor(this.state.progress)}%{\" \"}\n          </p>\n        </div>\n        <div className=\"answers\">{buttons}</div>\n        <p style={{ fontSize: \"1.5em\" }}>\n          Click the note that fits to the sound you just heard.\n        </p>\n        <p>{level}</p>\n        <div className=\"difficulties\">\n          <button className=\"btn\" id=\"1\" onClick={difficulty}>\n            Easy\n          </button>\n          <button className=\"btn\" id=\"2\" onClick={difficulty}>\n            Medium\n          </button>\n          <button className=\"btn\" id=\"3\" onClick={difficulty}>\n            Hard\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GuessTheNote;\n"]},"metadata":{},"sourceType":"module"}