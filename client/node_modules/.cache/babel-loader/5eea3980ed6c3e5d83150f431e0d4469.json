{"ast":null,"code":"import _classCallCheck from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/src/components/Dashboard.js\";\n// going to show games\nimport React, { Component } from \"react\";\nimport GuessTheNote from \"./games/GuessTheNote\";\nimport Game from \"./Game\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions\";\n\nvar Dashboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Dashboard, _Component);\n\n  function Dashboard(props) {\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dashboard).call(this, props));\n    _this.state = {\n      games: {}\n    };\n    return _this;\n  }\n\n  _createClass(Dashboard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var token = localStorage.getItem(\"token\");\n      this.props.fetchGames({\n        id: token\n      });\n    }\n  }, {\n    key: \"renderGames\",\n    value: function renderGames() {\n      this.state.games = {\n        // first this.props.games. is undefined thats why the error\n        guessTheNote: {\n          title: \"Guess The Note\",\n          description: \"You'll hear sound of a random note and guess which note it was.\",\n          progress: this.props.games.guessTheNote.correct * 100 / this.props.games.guessTheNote.tries\n        },\n        intervals: {\n          title: \"Intervals\",\n          description: \"You'll hear a sequence of 2 notes and decide whether the interval between those 2 notes is major 3rd, perfect 5th or an octave.\",\n          progress: this.props.games.intervals.correct * 100 / this.props.games.intervals.tries\n        },\n        melody: {\n          title: \"Melody chain\",\n          description: \"You'll hear a sequence of 2-3-4 notes from a given scale and try to repeat the notes.\",\n          progress: this.props.games.melody.correct * 100 / this.props.games.melody.tries\n        },\n        chords: {\n          title: \"Chords\",\n          description: \"You'll hear a chord and try to guess how many notes the chord contains.\",\n          progress: this.props.games.chords.correct * 100 / this.props.games.chords.tries\n        }\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(this.props.games);\n\n      if (Object.keys(this.props.games).length > 0) {\n        this.renderGames();\n      }\n\n      return React.createElement(\"div\", {\n        className: \"dashboard\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(Game, {\n        game: this.state.games.guessTheNote,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }), React.createElement(Game, {\n        game: this.state.games.intervals,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), React.createElement(Game, {\n        game: this.state.games.melody,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), React.createElement(Game, {\n        game: this.state.games.chords,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Dashboard;\n}(Component);\n\nfunction mapStateToProps(_ref) {\n  var games = _ref.games;\n  // to be able to use this.props.auth\n  return {\n    games: games\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Dashboard);","map":{"version":3,"sources":["/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/src/components/Dashboard.js"],"names":["React","Component","GuessTheNote","Game","connect","actions","Dashboard","props","state","games","token","localStorage","getItem","fetchGames","id","guessTheNote","title","description","progress","correct","tries","intervals","melody","chords","console","log","Object","keys","length","renderGames","mapStateToProps"],"mappings":"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","sourcesContent":["// going to show games\nimport React, { Component } from \"react\";\nimport GuessTheNote from \"./games/GuessTheNote\";\nimport Game from \"./Game\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions\";\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      games: {}\n    };\n  }\n  componentDidMount() {\n    const token = localStorage.getItem(\"token\");\n    this.props.fetchGames({ id: token });\n  }\n  renderGames() {\n    this.state.games = {\n      // first this.props.games. is undefined thats why the error\n      guessTheNote: {\n        title: \"Guess The Note\",\n        description:\n          \"You'll hear sound of a random note and guess which note it was.\",\n        progress:\n          (this.props.games.guessTheNote.correct * 100) /\n          this.props.games.guessTheNote.tries\n      },\n      intervals: {\n        title: \"Intervals\",\n        description:\n          \"You'll hear a sequence of 2 notes and decide whether the interval between those 2 notes is major 3rd, perfect 5th or an octave.\",\n        progress:\n          (this.props.games.intervals.correct * 100) /\n          this.props.games.intervals.tries\n      },\n      melody: {\n        title: \"Melody chain\",\n        description:\n          \"You'll hear a sequence of 2-3-4 notes from a given scale and try to repeat the notes.\",\n        progress:\n          (this.props.games.melody.correct * 100) /\n          this.props.games.melody.tries\n      },\n      chords: {\n        title: \"Chords\",\n        description:\n          \"You'll hear a chord and try to guess how many notes the chord contains.\",\n        progress:\n          (this.props.games.chords.correct * 100) /\n          this.props.games.chords.tries\n      }\n    };\n  }\n\n  render() {\n    console.log(this.props.games);\n    if (Object.keys(this.props.games).length > 0) {\n      this.renderGames();\n    }\n    return (\n      <div className=\"dashboard\">\n        <Game game={this.state.games.guessTheNote} />\n        <Game game={this.state.games.intervals} />\n        <Game game={this.state.games.melody} />\n        <Game game={this.state.games.chords} />\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps({ games }) {\n  // to be able to use this.props.auth\n  return { games };\n}\n\nexport default connect(\n  mapStateToProps,\n  actions\n)(Dashboard);\n"]},"metadata":{},"sourceType":"module"}