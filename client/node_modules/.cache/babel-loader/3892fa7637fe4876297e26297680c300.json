{"ast":null,"code":"import _defineProperty from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/src/components/games/GuessTheNote.js\";\nimport React, { Component } from \"react\";\nimport { octaves, all } from \"../assets/notes/notes\";\nimport \"./GuessTheNote.css\";\nimport axios from \"axios\";\n\nvar GuessTheNote =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GuessTheNote, _Component);\n\n  function GuessTheNote(props) {\n    var _this;\n\n    _classCallCheck(this, GuessTheNote);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GuessTheNote).call(this, props));\n    _this.state = {\n      progress: \"\",\n      C: \"blue\",\n      D: \"blue\",\n      E: \"blue\",\n      F: \"blue\",\n      G: \"blue\",\n      A: \"blue\",\n      B: \"blue\"\n    };\n    return _this;\n  }\n\n  _createClass(GuessTheNote, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var answer = localStorage.getItem(\"guessTheNote\");\n      var clear = false;\n\n      var getProgress =\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee() {\n          var res;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return axios.post(\"/api/progress\", {\n                    id: localStorage.getItem(\"token\"),\n                    game: \"guessTheNote\"\n                  });\n\n                case 2:\n                  res = _context.sent;\n\n                  if (res.data.progress !== _this2.state.progress) {\n                    _this2.setState({\n                      progress: res.data.progress\n                    });\n                  }\n\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        return function getProgress() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      getProgress();\n\n      if (answer == null) {\n        localStorage.setItem(\"guessTheNote\", Math.floor(Math.random() * all.length));\n      } // if (answer != null) {\n      //   answer = localStorage.getItem(\"guessTheNote\");\n      // }\n\n\n      var change = function change(name, correct) {\n        if (!correct) _this2.setState(_defineProperty({}, name, \"red\"));\n        if (correct) _this2.setState(_defineProperty({}, name, \"green\"));\n      };\n\n      var clearColors = function clearColors() {\n        _this2.setState({\n          progress: \"\",\n          C: \"blue\",\n          D: \"blue\",\n          E: \"blue\",\n          F: \"blue\",\n          G: \"blue\",\n          A: \"blue\",\n          B: \"blue\"\n        });\n      };\n\n      var playAnswer = function playAnswer(sound, name) {\n        var audio = new Audio(sound);\n        audio.play();\n\n        if (name === all[answer].name) {\n          console.log(\"right\"); // if the user's right\n\n          localStorage.setItem(\"guessTheNote\", Math.floor(Math.random() * all.length));\n          change(name, true);\n          setTimeout(function () {\n            clearColors();\n            playQuestion(all[localStorage.getItem(\"guessTheNote\")].sound);\n          }, 1000);\n        }\n\n        if (name !== all[answer].name) {\n          console.log(\"wrong\"); // if the user's wrong\n\n          change(name, false);\n        }\n      };\n\n      var playQuestion = function playQuestion(note) {\n        var audio = new Audio(note);\n        audio.play();\n      };\n\n      var buttons = octaves.c3.map(function (note) {\n        return React.createElement(\"button\", {\n          onClick: function onClick() {\n            return playAnswer(note.sound, note.name);\n          },\n          className: \"btn  sound waves-effect waves-light \" + _this2.state[note.name],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, note.name);\n      });\n      return React.createElement(\"div\", {\n        className: \"guessTheNote\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"question\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: function onClick() {\n          return playQuestion(all[answer].sound);\n        },\n        className: \"btn teal sound waves-effect waves-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"Play\"), React.createElement(\"p\", {\n        style: {\n          fontSize: \"1.5em\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"Click the button to hear again\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \" progress: \", this.state.progress, \"%\")), React.createElement(\"div\", {\n        className: \"answers\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, buttons), React.createElement(\"p\", {\n        style: {\n          fontSize: \"1.5em\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"Click the note that fits to the sound you just heard.\"));\n    }\n  }]);\n\n  return GuessTheNote;\n}(Component);\n\nexport default GuessTheNote;","map":{"version":3,"sources":["/Users/erikvardanyan/Desktop/Work/Web/Fullstack/Musicly/server/client/src/components/games/GuessTheNote.js"],"names":["React","Component","octaves","all","axios","GuessTheNote","props","state","progress","C","D","E","F","G","A","B","answer","localStorage","getItem","clear","getProgress","post","id","game","res","data","setState","setItem","Math","floor","random","length","change","name","correct","clearColors","playAnswer","sound","audio","Audio","play","console","log","setTimeout","playQuestion","note","buttons","c3","map","fontSize"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { octaves, all } from \"../assets/notes/notes\";\nimport \"./GuessTheNote.css\";\nimport axios from \"axios\";\n\nclass GuessTheNote extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      progress: \"\",\n      C: \"blue\",\n      D: \"blue\",\n      E: \"blue\",\n      F: \"blue\",\n      G: \"blue\",\n      A: \"blue\",\n      B: \"blue\"\n    };\n  }\n  render() {\n    let answer = localStorage.getItem(\"guessTheNote\");\n\n    let clear = false;\n\n    const getProgress = async () => {\n      const res = await axios.post(\"/api/progress\", {\n        id: localStorage.getItem(\"token\"),\n        game: \"guessTheNote\"\n      });\n      \n      if (res.data.progress !== this.state.progress){\n        \n        this.setState({ progress: res.data.progress });\n      }\n    };\n    getProgress();\n\n    if (answer == null) {\n      localStorage.setItem(\n        \"guessTheNote\",\n        Math.floor(Math.random() * all.length)\n      );\n    }\n\n    // if (answer != null) {\n    //   answer = localStorage.getItem(\"guessTheNote\");\n    // }\n\n    const change = (name, correct) => {\n      if (!correct) this.setState({ [name]: \"red\" });\n\n      if (correct) this.setState({ [name]: \"green\" });\n    };\n\n    const clearColors = () => {\n      this.setState({\n        progress: \"\",\n        C: \"blue\",\n        D: \"blue\",\n        E: \"blue\",\n        F: \"blue\",\n        G: \"blue\",\n        A: \"blue\",\n        B: \"blue\"\n      });\n    };\n\n    const playAnswer = (sound, name) => {\n      const audio = new Audio(sound);\n      audio.play();\n      if (name === all[answer].name) {\n        console.log(\"right\");\n        // if the user's right\n        localStorage.setItem(\n          \"guessTheNote\",\n          Math.floor(Math.random() * all.length)\n        );\n        change(name, true);\n        setTimeout(() => {\n          clearColors();\n          playQuestion(all[localStorage.getItem(\"guessTheNote\")].sound);\n        }, 1000);\n      }\n      if (name !== all[answer].name) {\n        console.log(\"wrong\");\n        // if the user's wrong\n        change(name, false);\n      }\n    };\n\n    const playQuestion = note => {\n      const audio = new Audio(note);\n      audio.play();\n    };\n\n    const buttons = octaves.c3.map(note => {\n      return (\n        <button\n          onClick={() => playAnswer(note.sound, note.name)}\n          className={\n            \"btn  sound waves-effect waves-light \" + this.state[note.name]\n          }\n        >\n          {note.name}\n        </button>\n      );\n    });\n\n    return (\n      <div className=\"guessTheNote\">\n        <div className=\"question\">\n          <button\n            onClick={() => playQuestion(all[answer].sound)}\n            className=\"btn teal sound waves-effect waves-light\"\n          >\n            Play\n          </button>\n          <p style={{ fontSize: \"1.5em\" }}>Click the button to hear again</p>\n          <p> progress: {this.state.progress}%</p>\n        </div>\n        <div className=\"answers\">{buttons}</div>\n        <p style={{ fontSize: \"1.5em\" }}>\n          Click the note that fits to the sound you just heard.\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default GuessTheNote;\n"]},"metadata":{},"sourceType":"module"}